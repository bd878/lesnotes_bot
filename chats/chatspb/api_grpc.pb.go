// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatsServiceClient is the client API for ChatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatsServiceClient interface {
	GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error)
}

type chatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatsServiceClient(cc grpc.ClientConnInterface) ChatsServiceClient {
	return &chatsServiceClient{cc}
}

func (c *chatsServiceClient) GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error) {
	out := new(GetChatResponse)
	err := c.cc.Invoke(ctx, "/ChatsService/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatsServiceServer is the server API for ChatsService service.
// All implementations must embed UnimplementedChatsServiceServer
// for forward compatibility
type ChatsServiceServer interface {
	GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error)
	mustEmbedUnimplementedChatsServiceServer()
}

// UnimplementedChatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatsServiceServer struct {
}

func (UnimplementedChatsServiceServer) GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedChatsServiceServer) mustEmbedUnimplementedChatsServiceServer() {}

// UnsafeChatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatsServiceServer will
// result in compilation errors.
type UnsafeChatsServiceServer interface {
	mustEmbedUnimplementedChatsServiceServer()
}

func RegisterChatsServiceServer(s *grpc.Server, srv ChatsServiceServer) {
	s.RegisterService(&_ChatsService_serviceDesc, srv)
}

func _ChatsService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatsService/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetChat(ctx, req.(*GetChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ChatsService",
	HandlerType: (*ChatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChat",
			Handler:    _ChatsService_GetChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
